// Generated by CoffeeScript 1.7.1

/*
	Author: Gautham Badhrinathan (gotemb@ucla.edu)
	Main client-side application logic. Uses RequireJS.
 */
var appContext,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  paths: {
    jquery: "/components/jquery/jquery.min",
    bootstrap: "/components/bootstrap/dist/js/bootstrap.min",
    bootstrapDatepicker: "/components/bootstrap-datepicker/js/bootstrap-datepicker",
    batman: "/batmanjs/batman",
    latestCARoms: "/latestCARoms.json?callback=define",
    latestPWSRoms: "/latestPWSRoms.json?callback=define",
    leaflet: "//cdn.leafletjs.com/leaflet-0.7.1/leaflet",
    esriLeaflet: "/esri-leaflet/esri-leaflet"
  },
  shim: {
    bootstrap: {
      deps: ["jquery"]
    },
    bootstrapDatepicker: {
      deps: ["bootstrap"]
    },
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    },
    leaflet: {
      exports: "L"
    },
    esriLeaflet: {
      deps: ["leaflet"]
    }
  },
  waitSeconds: 30
});

appContext = void 0;

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "latestCARoms", "latestPWSRoms", "leaflet", "bootstrap", "bootstrapDatepicker", "esriLeaflet"], function($, Batman, latestCARoms, latestPWSRoms, L) {
  var AppContext, Rompg, getParameterByName, padTo2Digits;
  padTo2Digits = function(n) {
    if (n < 10) {
      return "0" + n;
    } else {
      return n;
    }
  };
  getParameterByName = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    if (results != null) {
      return decodeURIComponent(results[1].replace(/\+/g, " "));
    } else {
      return "";
    }
  };
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    function AppContext() {
      AppContext.__super__.constructor.apply(this, arguments);
      if (window.location.pathname === "/") {
        this.set("homeContext", new this.HomeContext);
      }
      if (window.location.pathname === "/ca_roms") {
        this.set("romsCAContext", new this.RomsCAContext);
      }
      if (window.location.pathname === "/pws_roms") {
        this.set("romsPWSContext", new this.RomsPWSContext);
      }
      if (window.location.pathname === "/interactive") {
        this.set("interactiveContext", new this.InteractiveContext);
      }
    }

    AppContext.prototype.HomeContext = (function(_super1) {
      __extends(HomeContext, _super1);

      function HomeContext() {
        var now, variable, _i, _len, _ref;
        HomeContext.__super__.constructor.apply(this, arguments);
        _ref = ["curr", "salinity", "ssh", "temp"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          variable = _ref[_i];
          now = new Date(latestCARoms.ca[variable]);
          this.set("latestCaRomsImagePath_" + variable, "/data/ca-roms/" + (now.getUTCFullYear()) + "/" + (padTo2Digits(now.getUTCMonth() + 1)) + "/ca_" + variable + (padTo2Digits(now.getUTCMonth() + 1)) + (padTo2Digits(now.getUTCDate())) + "_" + (padTo2Digits(now.getUTCHours())) + "_0.jpg");
        }
      }

      return HomeContext;

    })(Batman.Model);

    AppContext.prototype.RomsCAContext = (function(_super1) {
      var hour, region, varMap, variable, _fn, _fn1, _fn2, _i, _j, _len, _len1, _ref, _ref1;

      __extends(RomsCAContext, _super1);

      varMap = {
        curr: "Current",
        salinity: "Salinity and Current",
        ssh: "Sea Surface Height and Current",
        temp: "Temperature and Current"
      };

      RomsCAContext.accessor("imgPath", function() {
        return "/data/ca-roms/" + (this.get("now").getUTCFullYear()) + "/" + (padTo2Digits(this.get("now").getUTCMonth() + 1)) + "/" + (this.get("region")) + "_" + (this.get("variable")) + (padTo2Digits(this.get("now").getUTCMonth() + 1)) + (padTo2Digits(this.get("now").getUTCDate())) + "_" + (padTo2Digits(this.get("now").getUTCHours())) + "_0.jpg";
      });

      RomsCAContext.accessor("regionLongName", function() {
        return $("ul>li[data-value=\"" + (this.get("region")) + "\"]>a").text();
      });

      _ref = [3, 9, 15, 21];
      _fn = function(hour) {
        RomsCAContext.accessor("is" + (padTo2Digits(hour)) + "Selected", function() {
          return this.get("now").getUTCHours() === hour;
        });
        return RomsCAContext.accessor("is" + (padTo2Digits(hour)) + "Enabled", function() {
          if (this.get("endDate").getUTCHours() >= hour || new Date(this.get("endDate")).setUTCHours(0, 0, 0, 0) > new Date(this.get("now")).setUTCHours(0, 0, 0, 0)) {
            return "";
          } else {
            return "disabled";
          }
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hour = _ref[_i];
        _fn(hour);
      }

      _fn1 = function(region) {
        return RomsCAContext.accessor("is_" + region, function() {
          return this.get("region") === region;
        });
      };
      for (region in latestCARoms) {
        _fn1(region);
      }

      _ref1 = ["curr", "salinity", "ssh", "temp"];
      _fn2 = function(variable) {
        return RomsCAContext.accessor("is_" + variable, function() {
          return !this.get("is_drifter") && this.get("variable") === variable;
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        variable = _ref1[_j];
        _fn2(variable);
      }

      function RomsCAContext() {
        var now;
        RomsCAContext.__super__.constructor.apply(this, arguments);
        if (varMap[getParameterByName("variable")] != null) {
          this.set("variable", getParameterByName("variable"));
        } else {
          this.set("variable", "curr");
        }
        this.set("region", "ca");
        this.set("is_drifter", getParameterByName("drifter") === "active");
        now = new Date(latestCARoms[this.get("region")][this.get("variable")]);
        $("[data-provide=\"datepicker-inline\"]").datepicker("setStartDate", "04/24/2013");
        $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
        this.set("endDate", now);
        this.changeNow(now);
        $("[data-provide=\"datepicker-inline\"]").on("changeDate", (function(_this) {
          return function(e) {
            now = new Date(_this.get("now"));
            now.setUTCDate(e.date.getDate());
            now.setUTCMonth(e.date.getMonth());
            now.setUTCFullYear(e.date.getFullYear());
            _this.set("now", now);
            now = new Date(latestCARoms[_this.get("region")][_this.get("variable")]);
            if (_this.get("now") > now) {
              return _this.changeNow(now);
            }
          };
        })(this));
        if (this.get("is_drifter")) {
          history.replaceState({
            drifter: "active"
          }, null, "/ca_roms?drifter=active");
        } else {
          history.replaceState({
            variable: this.get("variable")
          }, null, "/ca_roms?variable=" + (this.get("variable")));
        }
        window.onpopstate = (function(_this) {
          return function(e) {
            var _ref2, _ref3, _ref4;
            if (((_ref2 = e.state) != null ? _ref2.drifter : void 0) === "active") {
              return _this.set("is_drifter", true);
            } else {
              _this.set("is_drifter", false);
              return _this.set("variable", (_ref3 = (_ref4 = e.state) != null ? _ref4.variable : void 0) != null ? _ref3 : "curr");
            }
          };
        })(this);
      }

      RomsCAContext.prototype.timeChanged = function(node) {
        var now;
        now = new Date(this.get("now"));
        now.setUTCHours($(node).attr("data-value"));
        return this.set("now", now);
      };

      RomsCAContext.prototype.changeNow = function(date) {
        var now;
        this.set("now", date);
        $("[data-provide=\"datepicker-inline\"]").datepicker("update", "" + (date.getUTCMonth() + 1) + "/" + (date.getUTCDate()) + "/" + (date.getUTCFullYear()));
        now = new Date(latestCARoms[this.get("region")][this.get("variable")]);
        if (this.get("now") > now) {
          return this.changeNow(now);
        }
      };

      RomsCAContext.prototype.imageError = function() {
        return this.set("imageError", true);
      };

      RomsCAContext.prototype.imageLoad = function() {
        return this.set("imageError", false);
      };

      RomsCAContext.prototype.variableChanged = function(node) {
        var now;
        if ($(node).attr("data-value") === "drifter") {
          this.set("is_drifter", true);
          return history.pushState({
            drifter: "active"
          }, null, "/ca_roms?drifter=active");
        } else {
          if (this.get("variable") === $(node).attr("data-value") && !this.get("is_drifter")) {
            return;
          }
          this.set("is_drifter", false);
          now = new Date(latestCARoms[this.get("region")][this.get("variable")]);
          $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
          this.set("endDate", now);
          this.set("variable", $(node).attr("data-value"));
          this.changeNow(this.get("now") > now ? now : this.get("now"));
          return history.pushState({
            variable: this.get("variable")
          }, null, "/ca_roms?variable=" + (this.get("variable")));
        }
      };

      RomsCAContext.prototype.regionChanged = function(node) {
        var now;
        if (this.get("region") === $(node).attr("data-value")) {
          return;
        }
        this.set("region", $(node).attr("data-value"));
        now = new Date(latestCARoms[this.get("region")][this.get("variable")]);
        $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
        this.set("endDate", now);
        return this.changeNow(this.get("now") > now ? now : this.get("now"));
      };

      return RomsCAContext;

    })(Batman.Model);

    AppContext.prototype.RomsPWSContext = (function(_super1) {
      var hour, region, varMap, variable, _fn, _fn1, _fn2, _i, _j, _len, _len1, _ref, _ref1;

      __extends(RomsPWSContext, _super1);

      varMap = {
        curr: "Current",
        salinity: "Salinity and Current",
        ssh: "Sea Surface Height and Current",
        temp: "Temperature and Current"
      };

      RomsPWSContext.accessor("imgPath", function() {
        return "/data/myocean/PWS-nowcast-l" + (this.get("rindex")) + "/images/" + (this.get("now").getUTCFullYear()) + "/" + (padTo2Digits(this.get("now").getUTCMonth() + 1)) + "/" + (this.get("region")) + "_" + (this.get("variable")) + (padTo2Digits(this.get("now").getUTCMonth() + 1)) + (padTo2Digits(this.get("now").getUTCDate())) + "_" + (padTo2Digits(this.get("now").getUTCHours())) + "_0.jpg";
      });

      RomsPWSContext.accessor("regionLongName", function() {
        return $("ul>li[data-value=\"" + (this.get("region")) + "\"]>a").text();
      });

      _ref = [0, 6, 12, 18];
      _fn = function(hour) {
        RomsPWSContext.accessor("is" + (padTo2Digits(hour)) + "Selected", function() {
          return this.get("now").getUTCHours() === hour;
        });
        return RomsPWSContext.accessor("is" + (padTo2Digits(hour)) + "Enabled", function() {
          if (this.get("endDate").getUTCHours() >= hour || new Date(this.get("endDate")).setUTCHours(0, 0, 0, 0) > new Date(this.get("now")).setUTCHours(0, 0, 0, 0)) {
            return "";
          } else {
            return "disabled";
          }
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hour = _ref[_i];
        _fn(hour);
      }

      _fn1 = function(region) {
        return RomsPWSContext.accessor("is_" + region, function() {
          return this.get("region") === region;
        });
      };
      for (region in latestPWSRoms) {
        _fn1(region);
      }

      _ref1 = ["curr", "salinity", "ssh", "temp"];
      _fn2 = function(variable) {
        return RomsPWSContext.accessor("is_" + variable, function() {
          return !this.get("is_drifter") && this.get("variable") === variable;
        });
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        variable = _ref1[_j];
        _fn2(variable);
      }

      function RomsPWSContext() {
        var now;
        RomsPWSContext.__super__.constructor.apply(this, arguments);
        if (varMap[getParameterByName("variable")] != null) {
          this.set("variable", getParameterByName("variable"));
        } else {
          this.set("variable", "curr");
        }
        this.set("region", "goa");
        this.set("rindex", 0);
        this.set("is_drifter", getParameterByName("drifter") === "active");
        now = new Date(latestPWSRoms[this.get("region")][this.get("variable")]);
        $("[data-provide=\"datepicker-inline\"]").datepicker("setStartDate", "04/24/2013");
        $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
        this.set("endDate", now);
        this.changeNow(now);
        $("[data-provide=\"datepicker-inline\"]").on("changeDate", (function(_this) {
          return function(e) {
            now = new Date(_this.get("now"));
            now.setUTCDate(e.date.getDate());
            now.setUTCMonth(e.date.getMonth());
            now.setUTCFullYear(e.date.getFullYear());
            _this.set("now", now);
            now = new Date(latestPWSRoms[_this.get("region")][_this.get("variable")]);
            if (_this.get("now") > now) {
              return _this.changeNow(now);
            }
          };
        })(this));
        history.replaceState({
          variable: this.get("variable")
        }, null, "/pws_roms?variable=" + (this.get("variable")));
        window.onpopstate = (function(_this) {
          return function(e) {
            var _ref2, _ref3, _ref4;
            if (((_ref2 = e.state) != null ? _ref2.drifter : void 0) === "active") {
              return _this.set("is_drifter", true);
            } else {
              _this.set("is_drifter", false);
              return _this.set("variable", (_ref3 = (_ref4 = e.state) != null ? _ref4.variable : void 0) != null ? _ref3 : "curr");
            }
          };
        })(this);
      }

      RomsPWSContext.prototype.timeChanged = function(node) {
        var now;
        now = new Date(this.get("now"));
        now.setUTCHours($(node).attr("data-value"));
        return this.set("now", now);
      };

      RomsPWSContext.prototype.changeNow = function(date) {
        var now;
        this.set("now", date);
        $("[data-provide=\"datepicker-inline\"]").datepicker("update", "" + (date.getUTCMonth() + 1) + "/" + (date.getUTCDate()) + "/" + (date.getUTCFullYear()));
        now = new Date(latestPWSRoms[this.get("region")][this.get("variable")]);
        if (this.get("now") > now) {
          return this.changeNow(now);
        }
      };

      RomsPWSContext.prototype.imageError = function() {
        return this.set("imageError", true);
      };

      RomsPWSContext.prototype.imageLoad = function() {
        return this.set("imageError", false);
      };

      RomsPWSContext.prototype.variableChanged = function(node) {
        var now;
        if (this.get("variable") === $(node).attr("data-value")) {
          return;
        }
        now = new Date(latestPWSRoms[this.get("region")][this.get("variable")]);
        $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
        this.set("endDate", now);
        this.set("variable", $(node).attr("data-value"));
        this.changeNow(this.get("now") > now ? now : this.get("now"));
        return history.pushState({
          variable: this.get("variable")
        }, null, "/pws_roms?variable=" + (this.get("variable")));
      };

      RomsPWSContext.prototype.regionChanged = function(node) {
        var now;
        if (this.get("region") === $(node).attr("data-value")) {
          return;
        }
        this.set("region", $(node).attr("data-value"));
        this.set("rindex", $(node).attr("data-rindex"));
        now = new Date(latestPWSRoms[this.get("region")][this.get("variable")]);
        $("[data-provide=\"datepicker-inline\"]").datepicker("setEndDate", "" + (now.getUTCMonth() + 1) + "/" + (now.getUTCDate()) + "/" + (now.getUTCFullYear()));
        this.set("endDate", now);
        return this.changeNow(this.get("now") > now ? now : this.get("now"));
      };

      return RomsPWSContext;

    })(Batman.Model);

    AppContext.prototype.InteractiveContext = (function(_super1) {
      __extends(InteractiveContext, _super1);

      function InteractiveContext() {
        var imap;
        imap = L.map("imap").setView([37.5, -123], 7);
        (new L.esri.BasemapLayer("Oceans")).addTo(imap);
      }

      return InteractiveContext;

    })(Batman.Model);

    return AppContext;

  })(Batman.Model);
  Rompg = (function(_super) {
    __extends(Rompg, _super);

    function Rompg() {
      return Rompg.__super__.constructor.apply(this, arguments);
    }

    Rompg.appContext = appContext = new AppContext;

    return Rompg;

  })(Batman.App);
  Rompg.run();
  return $(function() {
    return appContext.set("pageLoaded", true);
  });
});
