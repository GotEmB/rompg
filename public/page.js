// Generated by CoffeeScript 1.6.3
var appContext,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  paths: {
    jquery: "/components/jquery/jquery.min",
    bootstrap: "/components/bootstrap/dist/js/bootstrap.min",
    bootstrapDatepicker: "/components/bootstrap-datepicker/js/bootstrap-datepicker",
    batman: "/batmanjs/batman",
    latestROMS: "/latestROMS.json?callback=define"
  },
  shim: {
    bootstrap: {
      deps: ["jquery"]
    },
    bootstrapDatepicker: {
      deps: ["bootstrap"]
    },
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    }
  },
  waitSeconds: 30
});

appContext = void 0;

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "latestROMS", "bootstrap", "bootstrapDatepicker"], function($, Batman, latestROMS) {
  var AppContext, Rompg, getParameterByName, padTo2Digits, _ref;
  padTo2Digits = function(n) {
    if (n < 10) {
      return "0" + n;
    } else {
      return n;
    }
  };
  getParameterByName = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    if (results != null) {
      return decodeURIComponent(results[1].replace(/\+/g, " "));
    } else {
      return "";
    }
  };
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    function AppContext() {
      AppContext.__super__.constructor.apply(this, arguments);
      if (window.location.pathname === "/") {
        this.set("homeContext", new this.HomeContext);
      }
      if (window.location.pathname === "/roms") {
        this.set("romsContext", new this.RomsContext);
      }
    }

    AppContext.prototype.HomeContext = (function(_super1) {
      __extends(HomeContext, _super1);

      function HomeContext() {
        var now, variable, _i, _len, _ref;
        HomeContext.__super__.constructor.apply(this, arguments);
        _ref = ["curr", "salinity", "ssh", "temp"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          variable = _ref[_i];
          now = new Date(latestROMS.ca[variable]);
          this.set("latestCaRomsImagePath_" + variable, "/data/ca-roms/" + (now.getUTCFullYear()) + "/ca_" + variable + (padTo2Digits(now.getUTCMonth() + 1)) + (padTo2Digits(now.getUTCDate())) + "_" + (padTo2Digits(now.getUTCHours())) + "_0.jpg");
        }
      }

      return HomeContext;

    })(Batman.Model);

    AppContext.prototype.RomsContext = (function(_super1) {
      var region, varMap, variable, _fn, _fn1, _i, _len, _ref,
        _this = this;

      __extends(RomsContext, _super1);

      varMap = {
        curr: "Current",
        salinity: "Salinity and Current",
        ssh: "Sea Surface Height and Current",
        temp: "Temperature and Current"
      };

      RomsContext.accessor("is03Selected", function() {
        return this.get("now").getUTCHours() === 3;
      });

      RomsContext.accessor("is09Selected", function() {
        return this.get("now").getUTCHours() === 9;
      });

      RomsContext.accessor("is15Selected", function() {
        return this.get("now").getUTCHours() === 15;
      });

      RomsContext.accessor("is21Selected", function() {
        return this.get("now").getUTCHours() === 21;
      });

      RomsContext.accessor("imgPath", function() {
        return "/data/ca-roms/" + (this.get("now").getUTCFullYear()) + "/" + (this.get("region")) + "_" + (this.get("variable")) + (padTo2Digits(this.get("now").getUTCMonth() + 1)) + (padTo2Digits(this.get("now").getUTCDate())) + "_" + (padTo2Digits(this.get("now").getUTCHours())) + "_0.jpg";
      });

      RomsContext.accessor("regionLongName", function() {
        return $("ul>li[data-value=\"" + (this.get("region")) + "\"]>a").text();
      });

      _fn = function(region) {
        return RomsContext.accessor("is_" + region, function() {
          return this.get("region") === region;
        });
      };
      for (region in latestROMS) {
        _fn(region);
      }

      _ref = ["curr", "salinity", "ssh", "temp"];
      _fn1 = function(variable) {
        return RomsContext.accessor("is_" + variable, function() {
          return this.get("variable") === variable;
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        variable = _ref[_i];
        _fn1(variable);
      }

      function RomsContext() {
        var _this = this;
        RomsContext.__super__.constructor.apply(this, arguments);
        if (varMap[getParameterByName("variable")] != null) {
          this.set("variable", getParameterByName("variable"));
        } else {
          this.set("variable", "curr");
        }
        this.set("region", "ca");
        this.changeNow(new Date(latestROMS[this.get("region")][this.get("variable")]));
        $("[data-provide=\"datepicker-inline\"]").on("changeDate", function(e) {
          var now;
          now = new Date(_this.get("now"));
          now.setUTCDate(e.date.getDate());
          now.setUTCMonth(e.date.getMonth());
          now.setUTCFullYear(e.date.getFullYear());
          return _this.set("now", now);
        });
        history.replaceState({
          variable: this.get("variable")
        }, null, "/roms?variable=" + (this.get("variable")));
        window.onpopstate = function(e) {
          var _ref1, _ref2;
          return _this.set("variable", (_ref1 = (_ref2 = e.state) != null ? _ref2.variable : void 0) != null ? _ref1 : "curr");
        };
      }

      RomsContext.prototype.timeChanged = function(node) {
        var now;
        now = new Date(this.get("now"));
        now.setUTCHours($(node).attr("data-value"));
        return this.set("now", now);
      };

      RomsContext.prototype.changeNow = function(date) {
        this.set("now", date);
        return $("[data-provide=\"datepicker-inline\"]").datepicker("update", "" + (date.getUTCMonth() + 1) + "/" + (date.getUTCDate()) + "/" + (date.getUTCFullYear()));
      };

      RomsContext.prototype.imageError = function() {
        return this.set("imageError", true);
      };

      RomsContext.prototype.imageLoad = function() {
        return this.set("imageError", false);
      };

      RomsContext.prototype.variableChanged = function(node) {
        var now;
        if (this.get("variable") === $(node).attr("data-value")) {
          return;
        }
        this.set("variable", $(node).attr("data-value"));
        if (this.get("now") > (now = new Date(latestROMS[this.get("region")][this.get("variable")]))) {
          this.changeNow(now);
        }
        return history.pushState({
          variable: this.get("variable")
        }, null, "/roms?variable=" + (this.get("variable")));
      };

      RomsContext.prototype.regionChanged = function(node) {
        var now;
        if (this.get("region") === $(node).attr("data-value")) {
          return;
        }
        this.set("region", $(node).attr("data-value"));
        if (this.get("now") > (now = new Date(latestROMS[this.get("region")][this.get("variable")]))) {
          return this.changeNow(now);
        }
      };

      return RomsContext;

    }).call(this, Batman.Model);

    return AppContext;

  }).call(this, Batman.Model);
  Rompg = (function(_super) {
    __extends(Rompg, _super);

    function Rompg() {
      _ref = Rompg.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Rompg.appContext = appContext = new AppContext;

    return Rompg;

  })(Batman.App);
  Rompg.run();
  return $(function() {
    return appContext.set("pageLoaded", true);
  });
});
