// Generated by CoffeeScript 1.6.3
var appContext,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  paths: {
    jquery: "/components/jquery/jquery.min",
    bootstrap: "/components/bootstrap/dist/js/bootstrap.min",
    bootstrapDatepicker: "/components/bootstrap-datepicker/js/bootstrap-datepicker",
    batman: "batmanjs/batman"
  },
  shim: {
    bootstrap: {
      deps: ["jquery"]
    },
    bootstrapDatepicker: {
      deps: ["bootstrap"]
    },
    batman: {
      deps: ["jquery"],
      exports: "Batman"
    }
  },
  waitSeconds: 30
});

appContext = void 0;

define("Batman", ["batman"], function(Batman) {
  return Batman.DOM.readers.batmantarget = Batman.DOM.readers.target && delete Batman.DOM.readers.target && Batman;
});

require(["jquery", "Batman", "bootstrap", "bootstrapDatepicker"], function($, Batman) {
  var AppContext, Rompg, _ref;
  AppContext = (function(_super) {
    __extends(AppContext, _super);

    function AppContext() {
      AppContext.__super__.constructor.apply(this, arguments);
      if (window.location.pathname === "/") {
        this.set("homeContext", new this.HomeContext);
      }
      if (window.location.pathname === "/roms") {
        this.set("romsContext", new this.RomsContext);
      }
    }

    AppContext.prototype.HomeContext = (function(_super1) {
      __extends(HomeContext, _super1);

      function HomeContext() {
        var now, time;
        HomeContext.__super__.constructor.apply(this, arguments);
        now = new Date;
        if (Math.floor((now.getUTCHours() - 3) / 6) < 0) {
          now.setDate(now.getDate() - 1);
        }
        time = ((Math.floor((now.getUTCHours() - 3) / 6 + 4)) % 4) * 6 + 3;
        this.set("latestCaRomsImagePath", "/data/ca-roms/" + (now.getUTCFullYear()) + "/ca_curr" + (now.getUTCMonth() + 1) + (now.getUTCDate()) + "_" + (time < 10 ? "0" + time : time) + "_0.jpg");
        this.set("latestCaRomsImageError", false);
      }

      HomeContext.prototype.latestCaRomsImageError = function() {
        return this.set("latestCaRomsImageError", true);
      };

      return HomeContext;

    })(Batman.Model);

    AppContext.prototype.RomsContext = (function(_super1) {
      __extends(RomsContext, _super1);

      function RomsContext() {
        RomsContext.__super__.constructor.apply(this, arguments);
        this.set("currentTab", "caRoms");
        this.set("caRoms", new this.CaRoms);
      }

      RomsContext.prototype.CaRoms = (function(_super2) {
        var varMap;

        __extends(CaRoms, _super2);

        varMap = {
          "Current": "curr",
          "Salinity and Current": "salinity",
          "Sea Surface Height and Current": "ssh",
          "Temperature and Current": "temp"
        };

        CaRoms.accessor("is03Selected", function() {
          return this.get("latestTime") === "03 UTC";
        });

        CaRoms.accessor("is09Selected", function() {
          return this.get("latestTime") === "09 UTC";
        });

        CaRoms.accessor("is15Selected", function() {
          return this.get("latestTime") === "15 UTC";
        });

        CaRoms.accessor("is21Selected", function() {
          return this.get("latestTime") === "21 UTC";
        });

        CaRoms.accessor("imgPath", function() {
          return "/data/ca-roms/" + (this.get("latestDate").getUTCFullYear()) + "/ca_" + varMap[this.get("variable")] + (this.get("latestDate").getUTCMonth() + 1) + (this.get("latestDate").getUTCDate()) + "_" + (this.get("latestTime").match(/^[0-9]+/g)[0]) + "_0.jpg";
        });

        CaRoms.accessor("isCurr", function() {
          return this.get("variable") === "Current";
        });

        CaRoms.accessor("isSalinity", function() {
          return this.get("variable") === "Salinity and Current";
        });

        CaRoms.accessor("isSSH", function() {
          return this.get("variable") === "Sea Surface Height and Current";
        });

        CaRoms.accessor("isTemp", function() {
          return this.get("variable") === "Temperature and Current";
        });

        function CaRoms() {
          var now, time,
            _this = this;
          CaRoms.__super__.constructor.apply(this, arguments);
          now = new Date;
          if (Math.floor((now.getUTCHours() - 3) / 6) < 0) {
            now.setDate(now.getDate() - 1);
          }
          this.changeDate(now);
          time = ((Math.floor((now.getUTCHours() - 3) / 6 + 4)) % 4) * 6 + 3;
          this.set("latestTime", "" + (time < 10 ? "0" + time : time) + " UTC");
          $("[data-provide=\"datepicker-inline\"]").on("changeDate", function(e) {
            e.date.setMilliseconds(e.date.getMilliseconds() - e.date.getTimezoneOffset() * 60 * 1000);
            return _this.set("latestDate", e.date);
          });
          this.set("variable", "Current");
        }

        CaRoms.prototype.timeChanged = function(node) {
          return this.set("latestTime", $(node).attr("data-value"));
        };

        CaRoms.prototype.changeTime = function(time) {
          var node;
          node = $("[data-value=\"" + time + "\"]")[0];
          if (!$(node).hasClass("active")) {
            return $(node).button("toggle");
          }
        };

        CaRoms.prototype.changeDate = function(date) {
          this.set("latestDate", date);
          return $("[data-provide=\"datepicker-inline\"]").datepicker("update", "" + (date.getUTCMonth() + 1) + "/" + (date.getUTCDate()) + "/" + (date.getUTCFullYear()));
        };

        CaRoms.prototype.imageError = function() {
          return this.set("imageError", true);
        };

        CaRoms.prototype.imageLoad = function() {
          return this.set("imageError", false);
        };

        CaRoms.prototype.variableChanged = function(node) {
          return this.set("variable", $(node).attr("data-value"));
        };

        return CaRoms;

      })(Batman.Model);

      return RomsContext;

    }).call(this, Batman.Model);

    return AppContext;

  }).call(this, Batman.Model);
  Rompg = (function(_super) {
    __extends(Rompg, _super);

    function Rompg() {
      _ref = Rompg.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Rompg.appContext = appContext = new AppContext;

    return Rompg;

  })(Batman.App);
  return Rompg.run();
});
